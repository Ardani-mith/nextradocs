{"/authentication":{"title":"Authentication","data":{}},"/authentication/oauth":{"title":"Oauth","data":{"google-oauth-setup#Google OAuth Setup":"This guide will help you set up Google OAuth to enable user authentication via Google in your application.","prerequisites#Prerequisites":"You will need to obtain the Google Client ID and Client Secret from the Google Cloud Console.","steps-to-obtain-google-client-id-and-client-secret#Steps to Obtain Google Client ID and Client Secret":"Go to the Google Cloud Console.\nCreate a new project or select an existing project (navbar).\nEnable the Google+ API for your project.\nCreate OAuth 2.0 credentials:\nNavigate to APIs & Services > Credentials.\nClick on Create credentials and select OAuth 2.0 Client IDs.\nConfigure the OAuth consent screen if you haven't done so already.\nSelect Web application and set the authorized redirect URIs (redirect URI should be: http://localhost:3000/api/auth/callback/google).\nFor more information, refer to the Google OAuth Documentation.","environment-variables#Environment Variables":"Add the following environment variables to your .env file:\nGOOGLE_CLIENT_ID=\"\"\nGOOGLE_CLIENT_SECRET=\"\"","prerequisites-1#Prerequisites":"You will need to obtain the GitHub Client ID and Client Secret from the GitHub Developer Settings.","steps-to-obtain-github-client-id-and-client-secret#Steps to Obtain GitHub Client ID and Client Secret":"Go to the Github Developer Settings\nRegister a new OAuth application:\nClick on New OAuth App.\nFill in the required fields such as application name, - homepage URL, and callback URL (should be: http://localhost:3000/api/auth/callback/github).\nAfter registering, you will receive a Client ID and Client Secret.","environment-variables-1#Environment Variables":"Add the following environment variables to your .env file:\nGITHUB_CLIENT_ID=\"\"\nGITHUB_CLIENT_SECRET=\"\"\nOnce you have connected both (or one of) google and github, we are ready to setup the code.","installing-dependencies#Installing Dependencies":"Install the necessary packages:\nnpm install next-auth @next-auth/google @next-auth/github","setting-up-nextauth-with-oauth#Setting Up NextAuth with OAuth":"Create a auth.config.ts file in the pages/api/auth directory that includes both Google & Github env files:\nimport bcrypt from 'bcryptjs'\nimport type { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Github from 'next-auth/providers/github'\nimport Google from 'next-auth/providers/google'\nimport { LoginSchema } from '@/schemas'\nimport { getUserByEmail } from '@/data/user'\nexport default {\n  providers: [\n    // OAuth authentication providers... the raw data is found at /api/auth/providers\n    Github({\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET\n    }),\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET\n    }),\n    Credentials({\n      async authorize(credentials) {\n        const validatedFields = await LoginSchema.safeParse(credentials)\n        if (validatedFields.success) {\n          const { email, password } = validatedFields.data\n          const user = await getUserByEmail(email)\n          // by no password I mean that the user is using a social login (Google, Github, etc.)\n          if (!user || !user.password) return null\n          // check if passwords match\n          const passwordsMatch = await bcrypt.compare(password, user.password)\n          // if the passwords match, return the user\n          if (passwordsMatch) return user\n        }\n        return null\n      }\n    })\n  ]\n} satisfies NextAuthConfig","using-oauth-buttons#Using OAuth Buttons":"In a page.tsx file, call the SignIn button from next-auth & connect it to the buttons of both github and google (see below)\n'use client'\nimport { Button } from '@/components/ui/button'\nimport { signIn } from 'next-auth/react'\nimport { FaGithub, FaGoogle } from 'react-icons/fa'\nexport const Social = () => {\n  const onClick = (provider: 'google' | 'github') => {\n    signIn(provider, {\n      callbackUrl: '/'\n    })\n  }\n  return (\n    <div className=\"flex gap-2 mt-3\">\n      <Button\n        className=\"rounded-[5px] w-full border border-primary/20 bg-secondary text-primary hover:bg-primary/10 text-md\"\n        onClick={() => onClick('google')}\n      >\n        <FaGoogle className=\"mr-2\" /> Google\n      </Button>\n      <Button\n        className=\"rounded-[5px] w-full border border-primary/20 bg-secondary text-primary hover:bg-primary/10 text-md\"\n        onClick={() => onClick('github')}\n      >\n        <FaGithub className=\"mr-2\" /> Github\n      </Button>\n    </div>\n  )\n}\nBy following this guide, you will have set up GitHub & Google OAuth in your application, allowing users to sign in using their GitHub or Google accounts. Be sure to thoroughly test the authentication flow in your local environment before deploying to production.For more detailed information, refer to the Auth.js documentation, the GitHub OAuth documentation, and the Google OAuth documentation."}},"/dashboard":{"title":"Dashboard","data":{"introduction#Introduction":"The admin dashboard page allows us to manage & look at how our app is doing in an easier way. It can be found at '/dashboard' of the application.It includes data such as:\nTotal revenue (from stripe)\nTotal paying users (from stripe)\nTotal users\nUsers this month,\n7 most recent users (includes the users name, email, and time they signed up),\n7 most recent sales (includes the users name, email, and amount paid),\nNumber of users line graph,\nSales amount bar graph,\nA goal progress with the amount made thus far from the app.","the-code#The Code":"Refer to the code below for more information\nimport {\n  Calendar,\n  CreditCard,\n  DollarSign,\n  PersonStandingIcon,\n  UserPlus,\n  UserRoundCheck\n} from 'lucide-react'\nimport {\n  DashboardCard,\n  DashboardCardContent\n} from './_components/dashboard-card'\nimport { db } from '@/lib/db'\nimport {\n  formatDistanceToNow,\n  startOfMonth,\n  endOfMonth,\n  eachMonthOfInterval,\n  format\n} from 'date-fns'\nimport UserDataCard, { UserDataProps } from './_components/user-data-card'\nimport UserPurchaseDataCard, {\n  UserPurchaseDataProps\n} from './_components/user-purchase-data'\nimport GoalDataCard from './_components/goal'\nimport LineGraph from './_components/line-graph'\nimport BarChart from './_components/barchart'\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\nexport default async function DashboardPage() {\n  // create an account and make your role an admin in the prisma studio so you can access the dashboard and no one else.\n  {\n    /*const role = await auth();\n    if (role?.user.role === 'USER' || !role) {\n        return redirect('/')\n    }*/\n  }\n  const currentDate = new Date()\n  // Fetch user count\n  const userCount = await db.user.count()\n  // Fetch new users count for the current month\n  const newUsersCount = await db.user.count({\n    where: {\n      createdAt: {\n        gte: startOfMonth(currentDate),\n        lte: endOfMonth(currentDate)\n      }\n    }\n  })\n  // Fetch total sales count\n  const salesCount = await db.purchase.count()\n  // Fetch total sales amount\n  const totalAmountResult = await db.purchase.aggregate({\n    _sum: {\n      amount: true\n    }\n  })\n  const totalAmount = totalAmountResult._sum.amount || 0\n  const goalAmount = 100\n  const progressValue = (totalAmount / goalAmount) * 100\n  // Fetch recent users\n  const recentUsers = await db.user.findMany({\n    orderBy: {\n      createdAt: 'desc'\n    },\n    take: 7\n  })\n  const userData: UserDataProps[] = recentUsers.map((account) => ({\n    name: account.name || 'Unknown',\n    email: account.email || 'No email',\n    image: account.image || '/mesh.jpeg',\n    time: formatDistanceToNow(new Date(account.createdAt), { addSuffix: true })\n  }))\n  // Fetch recent purchases\n  const recentPurchases = await db.purchase.findMany({\n    orderBy: {\n      createdAt: 'desc'\n    },\n    take: 5,\n    include: {\n      user: true\n    }\n  })\n  const userPurchaseData: UserPurchaseDataProps[] = recentPurchases.map(\n    (purchase) => ({\n      name: purchase.user?.name || 'Unknown',\n      email: purchase.user?.email || 'No email',\n      image: purchase.user?.image || '/mesh.jpeg',\n      saleAmount: `+$${(purchase.amount || 0).toFixed(2)}`\n    })\n  )\n  // Calculate users joined per month\n  const usersByMonth = await db.user.groupBy({\n    by: ['createdAt'],\n    _count: {\n      createdAt: true\n    },\n    orderBy: {\n      createdAt: 'asc'\n    }\n  })\n  const monthlyUserData = eachMonthOfInterval({\n    start: startOfMonth(new Date(usersByMonth[0]?.createdAt || new Date())),\n    end: endOfMonth(currentDate)\n  }).map((month) => {\n    const monthString = format(month, 'MMM')\n    const usersInMonth = usersByMonth\n      .filter((user) => format(new Date(user.createdAt), 'MMM') === monthString)\n      .reduce((total, user) => total + user._count.createdAt, 0)\n    return { month: monthString, users: usersInMonth }\n  })\n  // Calculate sales amount per month\n  const salesByMonth = await db.purchase.groupBy({\n    by: ['createdAt'],\n    _sum: {\n      amount: true\n    },\n    orderBy: {\n      createdAt: 'asc'\n    }\n  })\n  const monthlySalesData = eachMonthOfInterval({\n    start: startOfMonth(new Date(salesByMonth[0]?.createdAt || new Date())),\n    end: endOfMonth(currentDate)\n  }).map((month) => {\n    const monthString = format(month, 'MMM')\n    const salesInMonth = salesByMonth\n      .filter((sale) => format(new Date(sale.createdAt), 'MMM') === monthString)\n      .reduce((total, sale) => total + sale._sum.amount!, 0)\n    return { month: monthString, total: salesInMonth }\n  })\n  return (\n    <div className=\"flex flex-col gap-10 w-full mt-8 mb-12\">\n      <h1 className=\"font-bold text-4xl text-center\">Dashboard</h1>\n      <div className=\"flex flex-col gap-6 w-full\">\n        {/* Dashboard Cards */}\n        <section className=\"grid w-full grid-cols-1 gap-6 transition-all sm:grid-cols-2 xl:grid-cols-4\">\n          <DashboardCard\n            label=\"Revenue\"\n            Icon={DollarSign}\n            amount={`$${totalAmount}`}\n            description=\"All time\"\n          />\n          <DashboardCard\n            label=\"Total Paid Subscriptions\"\n            Icon={Calendar}\n            amount={`+${salesCount}`}\n            description=\"All time\"\n          />\n          <DashboardCard\n            label=\"Total Users\"\n            Icon={PersonStandingIcon}\n            amount={`+${userCount}`}\n            description=\"All time\"\n          />\n          <DashboardCard\n            label=\"Users This Month\"\n            Icon={UserPlus}\n            amount={`+${newUsersCount}`}\n            description=\"This month\"\n          />\n        </section>\n        {/* User Data and Purchase Data Cards */}\n        <section className=\"grid grid-cols-1 gap-6 transition-all lg:grid-cols-2 text-primary\">\n          <DashboardCardContent>\n            <section className=\"flex justify-between gap-2 text-primary pb-2\">\n              <p>Recent Users</p>\n              <UserRoundCheck className=\"h-4 w-4\" />\n            </section>\n            {userData.map((data, index) => (\n              <UserDataCard\n                key={`user-${index}`}\n                email={data.email}\n                name={data.name}\n                image={data.image}\n                time={data.time}\n              />\n            ))}\n          </DashboardCardContent>\n          <DashboardCardContent>\n            <section className=\"flex justify-between gap-2 text-primary pb-2\">\n              <p>Recent Sales</p>\n              <CreditCard className=\"h-4 w-4\" />\n            </section>\n            {userPurchaseData.map((data, index) => (\n              <UserPurchaseDataCard\n                key={`purchase-${index}`}\n                email={data.email}\n                image={data.image}\n                name={data.name}\n                saleAmount={data.saleAmount}\n              />\n            ))}\n          </DashboardCardContent>\n        </section>\n        <section className=\"grid grid-cols-1 gap-6 transition-all lg:grid-cols-2 text-primary\">\n          <LineGraph data={monthlyUserData} />\n          <BarChart data={monthlySalesData} />\n        </section>\n        <GoalDataCard goal={goalAmount} value={progressValue} />\n      </div>\n    </div>\n  )\n}"}},"/":{"title":"Introduction","data":{"":"Welcome to Nizzy Starter Kit! This is our documentation. You can use it as a guide to installing, setting up, and understanding more about the starter kit  :)","what-is-nizzy-starter-kit#What is Nizzy Starter Kit?":"We are a simple, easy-to-use and open source NextJS SaaS Starter Kit. Refer to the video below for more information."}}}